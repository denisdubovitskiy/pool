// Code generated by http://github.com/gojuno/minimock (v3.4.3). DO NOT EDIT.

package pool

//go:generate minimock -i github.com/denisdubovitskiy/pool.OnGetTimeoutHook -o zzz_on_get_timeout_hook_mock_test.go -n OnGetTimeoutHookMock -p pool

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// OnGetTimeoutHookMock implements OnGetTimeoutHook
type OnGetTimeoutHookMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcOnGetTimeout          func(timeout time.Duration)
	funcOnGetTimeoutOrigin    string
	inspectFuncOnGetTimeout   func(timeout time.Duration)
	afterOnGetTimeoutCounter  uint64
	beforeOnGetTimeoutCounter uint64
	OnGetTimeoutMock          mOnGetTimeoutHookMockOnGetTimeout
}

// NewOnGetTimeoutHookMock returns a mock for OnGetTimeoutHook
func NewOnGetTimeoutHookMock(t minimock.Tester) *OnGetTimeoutHookMock {
	m := &OnGetTimeoutHookMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.OnGetTimeoutMock = mOnGetTimeoutHookMockOnGetTimeout{mock: m}
	m.OnGetTimeoutMock.callArgs = []*OnGetTimeoutHookMockOnGetTimeoutParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mOnGetTimeoutHookMockOnGetTimeout struct {
	optional           bool
	mock               *OnGetTimeoutHookMock
	defaultExpectation *OnGetTimeoutHookMockOnGetTimeoutExpectation
	expectations       []*OnGetTimeoutHookMockOnGetTimeoutExpectation

	callArgs []*OnGetTimeoutHookMockOnGetTimeoutParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// OnGetTimeoutHookMockOnGetTimeoutExpectation specifies expectation struct of the OnGetTimeoutHook.OnGetTimeout
type OnGetTimeoutHookMockOnGetTimeoutExpectation struct {
	mock               *OnGetTimeoutHookMock
	params             *OnGetTimeoutHookMockOnGetTimeoutParams
	paramPtrs          *OnGetTimeoutHookMockOnGetTimeoutParamPtrs
	expectationOrigins OnGetTimeoutHookMockOnGetTimeoutExpectationOrigins

	returnOrigin string
	Counter      uint64
}

// OnGetTimeoutHookMockOnGetTimeoutParams contains parameters of the OnGetTimeoutHook.OnGetTimeout
type OnGetTimeoutHookMockOnGetTimeoutParams struct {
	timeout time.Duration
}

// OnGetTimeoutHookMockOnGetTimeoutParamPtrs contains pointers to parameters of the OnGetTimeoutHook.OnGetTimeout
type OnGetTimeoutHookMockOnGetTimeoutParamPtrs struct {
	timeout *time.Duration
}

// OnGetTimeoutHookMockOnGetTimeoutOrigins contains origins of expectations of the OnGetTimeoutHook.OnGetTimeout
type OnGetTimeoutHookMockOnGetTimeoutExpectationOrigins struct {
	origin        string
	originTimeout string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Optional() *mOnGetTimeoutHookMockOnGetTimeout {
	mmOnGetTimeout.optional = true
	return mmOnGetTimeout
}

// Expect sets up expected params for OnGetTimeoutHook.OnGetTimeout
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Expect(timeout time.Duration) *mOnGetTimeoutHookMockOnGetTimeout {
	if mmOnGetTimeout.mock.funcOnGetTimeout != nil {
		mmOnGetTimeout.mock.t.Fatalf("OnGetTimeoutHookMock.OnGetTimeout mock is already set by Set")
	}

	if mmOnGetTimeout.defaultExpectation == nil {
		mmOnGetTimeout.defaultExpectation = &OnGetTimeoutHookMockOnGetTimeoutExpectation{}
	}

	if mmOnGetTimeout.defaultExpectation.paramPtrs != nil {
		mmOnGetTimeout.mock.t.Fatalf("OnGetTimeoutHookMock.OnGetTimeout mock is already set by ExpectParams functions")
	}

	mmOnGetTimeout.defaultExpectation.params = &OnGetTimeoutHookMockOnGetTimeoutParams{timeout}
	mmOnGetTimeout.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmOnGetTimeout.expectations {
		if minimock.Equal(e.params, mmOnGetTimeout.defaultExpectation.params) {
			mmOnGetTimeout.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmOnGetTimeout.defaultExpectation.params)
		}
	}

	return mmOnGetTimeout
}

// ExpectTimeoutParam1 sets up expected param timeout for OnGetTimeoutHook.OnGetTimeout
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) ExpectTimeoutParam1(timeout time.Duration) *mOnGetTimeoutHookMockOnGetTimeout {
	if mmOnGetTimeout.mock.funcOnGetTimeout != nil {
		mmOnGetTimeout.mock.t.Fatalf("OnGetTimeoutHookMock.OnGetTimeout mock is already set by Set")
	}

	if mmOnGetTimeout.defaultExpectation == nil {
		mmOnGetTimeout.defaultExpectation = &OnGetTimeoutHookMockOnGetTimeoutExpectation{}
	}

	if mmOnGetTimeout.defaultExpectation.params != nil {
		mmOnGetTimeout.mock.t.Fatalf("OnGetTimeoutHookMock.OnGetTimeout mock is already set by Expect")
	}

	if mmOnGetTimeout.defaultExpectation.paramPtrs == nil {
		mmOnGetTimeout.defaultExpectation.paramPtrs = &OnGetTimeoutHookMockOnGetTimeoutParamPtrs{}
	}
	mmOnGetTimeout.defaultExpectation.paramPtrs.timeout = &timeout
	mmOnGetTimeout.defaultExpectation.expectationOrigins.originTimeout = minimock.CallerInfo(1)

	return mmOnGetTimeout
}

// Inspect accepts an inspector function that has same arguments as the OnGetTimeoutHook.OnGetTimeout
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Inspect(f func(timeout time.Duration)) *mOnGetTimeoutHookMockOnGetTimeout {
	if mmOnGetTimeout.mock.inspectFuncOnGetTimeout != nil {
		mmOnGetTimeout.mock.t.Fatalf("Inspect function is already set for OnGetTimeoutHookMock.OnGetTimeout")
	}

	mmOnGetTimeout.mock.inspectFuncOnGetTimeout = f

	return mmOnGetTimeout
}

// Return sets up results that will be returned by OnGetTimeoutHook.OnGetTimeout
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Return() *OnGetTimeoutHookMock {
	if mmOnGetTimeout.mock.funcOnGetTimeout != nil {
		mmOnGetTimeout.mock.t.Fatalf("OnGetTimeoutHookMock.OnGetTimeout mock is already set by Set")
	}

	if mmOnGetTimeout.defaultExpectation == nil {
		mmOnGetTimeout.defaultExpectation = &OnGetTimeoutHookMockOnGetTimeoutExpectation{mock: mmOnGetTimeout.mock}
	}

	mmOnGetTimeout.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmOnGetTimeout.mock
}

// Set uses given function f to mock the OnGetTimeoutHook.OnGetTimeout method
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Set(f func(timeout time.Duration)) *OnGetTimeoutHookMock {
	if mmOnGetTimeout.defaultExpectation != nil {
		mmOnGetTimeout.mock.t.Fatalf("Default expectation is already set for the OnGetTimeoutHook.OnGetTimeout method")
	}

	if len(mmOnGetTimeout.expectations) > 0 {
		mmOnGetTimeout.mock.t.Fatalf("Some expectations are already set for the OnGetTimeoutHook.OnGetTimeout method")
	}

	mmOnGetTimeout.mock.funcOnGetTimeout = f
	mmOnGetTimeout.mock.funcOnGetTimeoutOrigin = minimock.CallerInfo(1)
	return mmOnGetTimeout.mock
}

// Times sets number of times OnGetTimeoutHook.OnGetTimeout should be invoked
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Times(n uint64) *mOnGetTimeoutHookMockOnGetTimeout {
	if n == 0 {
		mmOnGetTimeout.mock.t.Fatalf("Times of OnGetTimeoutHookMock.OnGetTimeout mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmOnGetTimeout.expectedInvocations, n)
	mmOnGetTimeout.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmOnGetTimeout
}

func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) invocationsDone() bool {
	if len(mmOnGetTimeout.expectations) == 0 && mmOnGetTimeout.defaultExpectation == nil && mmOnGetTimeout.mock.funcOnGetTimeout == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmOnGetTimeout.mock.afterOnGetTimeoutCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmOnGetTimeout.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// OnGetTimeout implements OnGetTimeoutHook
func (mmOnGetTimeout *OnGetTimeoutHookMock) OnGetTimeout(timeout time.Duration) {
	mm_atomic.AddUint64(&mmOnGetTimeout.beforeOnGetTimeoutCounter, 1)
	defer mm_atomic.AddUint64(&mmOnGetTimeout.afterOnGetTimeoutCounter, 1)

	mmOnGetTimeout.t.Helper()

	if mmOnGetTimeout.inspectFuncOnGetTimeout != nil {
		mmOnGetTimeout.inspectFuncOnGetTimeout(timeout)
	}

	mm_params := OnGetTimeoutHookMockOnGetTimeoutParams{timeout}

	// Record call args
	mmOnGetTimeout.OnGetTimeoutMock.mutex.Lock()
	mmOnGetTimeout.OnGetTimeoutMock.callArgs = append(mmOnGetTimeout.OnGetTimeoutMock.callArgs, &mm_params)
	mmOnGetTimeout.OnGetTimeoutMock.mutex.Unlock()

	for _, e := range mmOnGetTimeout.OnGetTimeoutMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation.Counter, 1)
		mm_want := mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation.params
		mm_want_ptrs := mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation.paramPtrs

		mm_got := OnGetTimeoutHookMockOnGetTimeoutParams{timeout}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.timeout != nil && !minimock.Equal(*mm_want_ptrs.timeout, mm_got.timeout) {
				mmOnGetTimeout.t.Errorf("OnGetTimeoutHookMock.OnGetTimeout got unexpected parameter timeout, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation.expectationOrigins.originTimeout, *mm_want_ptrs.timeout, mm_got.timeout, minimock.Diff(*mm_want_ptrs.timeout, mm_got.timeout))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmOnGetTimeout.t.Errorf("OnGetTimeoutHookMock.OnGetTimeout got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmOnGetTimeout.OnGetTimeoutMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmOnGetTimeout.funcOnGetTimeout != nil {
		mmOnGetTimeout.funcOnGetTimeout(timeout)
		return
	}
	mmOnGetTimeout.t.Fatalf("Unexpected call to OnGetTimeoutHookMock.OnGetTimeout. %v", timeout)

}

// OnGetTimeoutAfterCounter returns a count of finished OnGetTimeoutHookMock.OnGetTimeout invocations
func (mmOnGetTimeout *OnGetTimeoutHookMock) OnGetTimeoutAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOnGetTimeout.afterOnGetTimeoutCounter)
}

// OnGetTimeoutBeforeCounter returns a count of OnGetTimeoutHookMock.OnGetTimeout invocations
func (mmOnGetTimeout *OnGetTimeoutHookMock) OnGetTimeoutBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmOnGetTimeout.beforeOnGetTimeoutCounter)
}

// Calls returns a list of arguments used in each call to OnGetTimeoutHookMock.OnGetTimeout.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmOnGetTimeout *mOnGetTimeoutHookMockOnGetTimeout) Calls() []*OnGetTimeoutHookMockOnGetTimeoutParams {
	mmOnGetTimeout.mutex.RLock()

	argCopy := make([]*OnGetTimeoutHookMockOnGetTimeoutParams, len(mmOnGetTimeout.callArgs))
	copy(argCopy, mmOnGetTimeout.callArgs)

	mmOnGetTimeout.mutex.RUnlock()

	return argCopy
}

// MinimockOnGetTimeoutDone returns true if the count of the OnGetTimeout invocations corresponds
// the number of defined expectations
func (m *OnGetTimeoutHookMock) MinimockOnGetTimeoutDone() bool {
	if m.OnGetTimeoutMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.OnGetTimeoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.OnGetTimeoutMock.invocationsDone()
}

// MinimockOnGetTimeoutInspect logs each unmet expectation
func (m *OnGetTimeoutHookMock) MinimockOnGetTimeoutInspect() {
	for _, e := range m.OnGetTimeoutMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to OnGetTimeoutHookMock.OnGetTimeout at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterOnGetTimeoutCounter := mm_atomic.LoadUint64(&m.afterOnGetTimeoutCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.OnGetTimeoutMock.defaultExpectation != nil && afterOnGetTimeoutCounter < 1 {
		if m.OnGetTimeoutMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to OnGetTimeoutHookMock.OnGetTimeout at\n%s", m.OnGetTimeoutMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to OnGetTimeoutHookMock.OnGetTimeout at\n%s with params: %#v", m.OnGetTimeoutMock.defaultExpectation.expectationOrigins.origin, *m.OnGetTimeoutMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcOnGetTimeout != nil && afterOnGetTimeoutCounter < 1 {
		m.t.Errorf("Expected call to OnGetTimeoutHookMock.OnGetTimeout at\n%s", m.funcOnGetTimeoutOrigin)
	}

	if !m.OnGetTimeoutMock.invocationsDone() && afterOnGetTimeoutCounter > 0 {
		m.t.Errorf("Expected %d calls to OnGetTimeoutHookMock.OnGetTimeout at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.OnGetTimeoutMock.expectedInvocations), m.OnGetTimeoutMock.expectedInvocationsOrigin, afterOnGetTimeoutCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *OnGetTimeoutHookMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockOnGetTimeoutInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *OnGetTimeoutHookMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *OnGetTimeoutHookMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockOnGetTimeoutDone()
}
